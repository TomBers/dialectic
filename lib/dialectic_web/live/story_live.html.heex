<h1>Conversation</h1>
<div class="readability-controls">
  <button id="toggle-bionic" type="button">Bionic Reading</button>
  <button id="toggle-focus" type="button">Focus Mode</button>
</div>
<div class="conversation">
  <%= for {node, idx} <- Enum.with_index(@path) do %>
    <div class={"message " <> if rem(idx, 2) == 0, do: "left", else: "right"}>
      <div class="speaker">{node.user || "Speaker"}:</div>
      <div class="bubble" phx-hook="ReadabilityBubble" id={"bubble-#{idx}"}>
        <%= for paragraph <- Regex.split(~r/(?:\r?\n){2,}|(?<=\.|\!|\?)\s{2,}/, node.content || "", trim: true) do %>
          <p class="bionic">{paragraph}</p>
        <% end %>
      </div>
    </div>
  <% end %>
</div>

<div class="nav-buttons">
  <button phx-click="previous" class="nav-btn prev-btn" type="button">&#8592; Previous</button>
  <button phx-click="next" class="nav-btn next-btn" type="button">Next &#8594;</button>
</div>

<style>
  .conversation {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
    max-width: 960px;
    margin: 0 auto 1em;
  }
  .readability-controls {
    display: flex;
    gap: 0.7em;
    margin-bottom: 1em;
    justify-content: flex-end;
  }
  .readability-controls button {
    font-size: 0.95em;
    padding: 0.3em 1.1em;
    border-radius: 1.2em;
    border: 1px solid #bbb;
    background: #f8f8fa;
    cursor: pointer;
    transition: background 0.2s;
  }
  .readability-controls button.active {
    background: #4895ef;
    color: #fff;
    border-color: #4895ef;
  }
  .message {
    display: flex;
    flex-direction: column;
    max-width: 60%;
    margin-bottom: 1.2em;
    padding: 1.1em 1.5em;
    border-radius: 1em;
  }
  .message.left {
    align-self: flex-start;
    background: #f0f0f0;
    border-radius: 1em 1em 1em 0.2em;
    margin-left: 0.5em;
  }
  .message.right {
    align-self: flex-end;
    background: #d0eaff;
    border-radius: 1em 1em 0.2em 1em;
    margin-right: 0.5em;
  }
  .speaker {
    font-size: 0.95em;
    font-weight: bold;
    margin-bottom: 0.5em;
    color: #555;
    letter-spacing: 0.01em;
  }
  .bubble {
    font-size: 1.15em;
    line-height: 1.7;
    padding: 0.2em 0;
    word-break: break-word;
    max-width: 75ch;
    font-family: Inter, Roboto, "Open Sans", Arial, sans-serif;
    transition: background 0.3s;
    position: relative;
    text-align: left;
  }
  .bubble p {
    margin: 0.7em 0;
  }
  .bubble.focus-fade p {
    opacity: 0.25;
    filter: blur(1px);
    transition: opacity 0.3s, filter 0.3s;
  }
  .bubble.focus-fade p.focus-global-current {
    opacity: 1;
    filter: none;
    background: #fffbe6;
    border-radius: 0.4em;
    box-shadow: 0 2px 8px rgba(67, 97, 238, 0.07);
    transition: background 0.3s, opacity 0.3s, filter 0.3s;
  }
  .nav-buttons {
    display: flex;
    justify-content: center;
    gap: 1.5em;
    margin-top: 2em;
  }
  .nav-btn {
    background: linear-gradient(90deg, #4361ee 0%, #4895ef 100%);
    color: #fff;
    border: none;
    border-radius: 2em;
    padding: 0.7em 2.2em;
    font-size: 1.1em;
    font-weight: 600;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(67, 97, 238, 0.08);
    transition: all 0.2s;
    outline: none;
  }
  .nav-btn:hover, .nav-btn:focus {
    background: linear-gradient(90deg, #4895ef 0%, #4361ee 100%);
    transform: translateY(-2px) scale(1.04);
    box-shadow: 0 4px 16px rgba(67, 97, 238, 0.13);
  }
  .prev-btn {
    background: linear-gradient(90deg, #b5179e 0%, #7209b7 100%);
  }
  .prev-btn:hover, .prev-btn:focus {
    background: linear-gradient(90deg, #7209b7 0%, #b5179e 100%);
  }
</style>

<script>
  window.addEventListener("phx:page-loading-stop", () => {
    if (window.ReadabilityBubbleHookInitialized) return;
    window.ReadabilityBubbleHookInitialized = true;

    // DOM elements
    const bionicToggle = document.getElementById("toggle-bionic");
    const focusToggle = document.getElementById("toggle-focus");
    let bionicActive = false;
    let focusActive = false;

    // Bionic Reading function
    function bionicizeText(text) {
      return text.replace(/\b(\w{1,3})(\w*)\b/g, (match, p1, p2) =>
        `<b style='font-weight:600'>${p1}</b>${p2}`
      );
    }

    // Apply/remove bionic reading to all paragraphs
    function toggleBionic(active) {
      document.querySelectorAll('.bubble .bionic').forEach(p => {
        if (active) {
          if (!p.dataset.bionicized) {
            p.innerHTML = bionicizeText(p.textContent);
            p.dataset.bionicized = "true";
          }
        } else {
          p.innerHTML = p.textContent;
          p.dataset.bionicized = "";
        }
      });
    }

    // Focus Mode function
    function toggleFocus(active) {
      document.querySelectorAll('.bubble').forEach(bubble => {
        const paragraphs = bubble.querySelectorAll("p");
        if (active) {
          bubble.classList.add("focus-fade");
          // If no paragraph is focused, focus the first
          if (![...paragraphs].some(p => p.classList.contains("focus-global-current")) && paragraphs.length > 0) {
            paragraphs[0].classList.add("focus-global-current");
          }
        } else {
          bubble.classList.remove("focus-fade");
          paragraphs.forEach(p => p.classList.remove("focus-global-current"));
        }
      });
    }

    // Highlight paragraph closest to center when scrolling
    function highlightCenterParagraph() {
      if (!focusActive) return;

      const allParagraphs = Array.from(document.querySelectorAll('.bubble p'));
      if (!allParagraphs.length) return;

      const winHeight = window.innerHeight;
      const winCenter = winHeight / 2;
      let toHighlight = allParagraphs[0];
      let minDist = Infinity;

      // Handle special scroll cases
      if (window.scrollY === 0) {
        toHighlight = allParagraphs[0];
      } else if (window.innerHeight + window.scrollY >= document.body.scrollHeight - 2) {
        toHighlight = allParagraphs[allParagraphs.length - 1];
      } else {
        // Find paragraph closest to screen center
        allParagraphs.forEach(p => {
          const rect = p.getBoundingClientRect();
          const paraCenter = (rect.top + rect.bottom) / 2;
          const dist = Math.abs(paraCenter - winCenter);
          if (dist < minDist) {
            minDist = dist;
            toHighlight = p;
          }
        });
      }

      // Apply highlighting
      allParagraphs.forEach(p => {
        p.classList.toggle("focus-global-current", p === toHighlight);
      });
    }

    // Event listeners
    bionicToggle.addEventListener("click", () => {
      bionicActive = !bionicActive;
      bionicToggle.classList.toggle("active", bionicActive);
      toggleBionic(bionicActive);
    });

    focusToggle.addEventListener("click", () => {
      focusActive = !focusActive;
      focusToggle.classList.toggle("active", focusActive);
      toggleFocus(focusActive);
      if (focusActive) setTimeout(highlightCenterParagraph, 100);
    });

    // Scroll events for focus mode
    window.addEventListener("scroll", highlightCenterParagraph, { passive: true });
    window.addEventListener("resize", highlightCenterParagraph);
  });
</script>
