<div class="readability-controls">
  <button id="toggle-dark" type="button">Dark Mode</button>
  <button id="toggle-bionic" type="button">Low Fixation Reading</button>
  <button id="toggle-focus" type="button">Focus Mode</button>
  <div class="font-size-controls">
    <button id="decrease-font" type="button">A-</button>
    <button id="reset-font" type="button">A</button>
    <button id="increase-font" type="button">A+</button>
  </div>
</div>
<div class="conversation">
  <%= for {node, idx} <- Enum.with_index(@path) do %>
    <% is_explanation = node.content && String.starts_with?(String.trim(node.content), "Explain:")
    is_title = node.content && String.starts_with?(String.trim(node.content), "Title:")

    # Extract title and content for title messages
    {title_text, remaining_content} =
      if is_title && node.content do
        trimmed = String.trim(node.content)
        title_without_prefix = String.replace(trimmed, ~r/^Title:\s*/, "", global: false)

        # Split by first newline
        case String.split(title_without_prefix, ~r/\r?\n/, parts: 2) do
          [title_part, content_part] -> {title_part, content_part}
          # No newline found
          [only_title] -> {only_title, ""}
        end
      else
        {nil, nil}
      end

    # Process content to remove prefixes if present
    processed_content =
      cond do
        is_explanation && node.content ->
          String.replace(String.trim(node.content), ~r/^Explain:\s*/, "", global: false)

        is_title && node.content ->
          remaining_content

        true ->
          node.content
      end %>
    <div class={"message " <> (if rem(idx, 2) == 0, do: "left", else: "right") <> (if is_explanation, do: " explanation", else: "")}>
      <div class="speaker">
        {cond do
          is_explanation -> "Explanation"
          is_title -> node.user || "Speaker"
          true -> node.user || "Speaker"
        end}
      </div>
      <div class="bubble" id={"bubble-#{idx}"}>
        <%= if is_title do %>
          <h3 class="message-title">{title_text}</h3>
        <% end %>

        <%= if !is_title || (is_title && String.length(processed_content) > 0) do %>
          <% # Split content into initial paragraphs
          initial_paragraphs =
            Regex.split(~r/(?:\r?\n){2,}|(?<=\.|\!|\?)\s{2,}/, processed_content || "",
              trim: true
            )

          # Further chunk paragraphs that are too long
          chunked_paragraphs =
            Enum.flat_map(initial_paragraphs, fn paragraph ->
              # Count sentences in paragraph
              sentences = Regex.split(~r/(?<=\.|\!|\?)\s+/, paragraph, trim: true)
              sentence_count = length(sentences)

              if sentence_count > 3 do
                # Chunk into smaller paragraphs (2-3 sentences each)
                sentences
                |> Enum.chunk_every(2)
                |> Enum.map(fn chunk -> Enum.join(chunk, " ") end)
              else
                [paragraph]
              end
            end) %>

          <%= for {paragraph, p_idx} <- Enum.with_index(chunked_paragraphs) do %>
            <p class={"bionic #{if p_idx > 0 && rem(p_idx, 3) == 0, do: "paragraph-break", else: ""}"}>
              {paragraph}
            </p>
          <% end %>
        <% end %>
      </div>
    </div>
  <% end %>
</div>
<div class="scroll-spacer" style="height: 70vh;"></div>

<style>
  :root {
    --text-color: #222;
    --bg-color: #fff;
    --bubble-bg: #ffffff;
    --left-border: #0747a6;
    --right-border: #5f0b87;
    --accent-color: #0747a6;
    --secondary-accent: #5f0b87;
    --explanation-color: #f5c842;
    --explanation-text: #845a00;
    --title-color: #3a5cff;
    --title-text: #333;
    --title-bg: transparent;
    --focus-highlight: #fff6d6;
    --border-radius: 1rem;
    --card-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    --header-font: 'Georgia', serif;
    # --body-font: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    --font-size-base: 18px;
    --line-height: 1.6;
    --transition-speed: 0.3s;
  }

  .dark-mode {
    --text-color: #ffffff;
    --bg-color: #121212;
    --bubble-bg: #1e1e1e;
    --left-border: #82b1ff;
    --right-border: #cf9fff;
    --accent-color: #82b1ff;
    --secondary-accent: #cf9fff;
    --explanation-color: #d4af37;
    --explanation-text: #f0d078;
    --title-color: #5c9eff;
    --title-text: #e0e0e0;
    --title-bg: transparent;
    --focus-highlight: #584e1b;
    --card-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
  }

  body {
    background-color: var(--bg-color);
    color: var(--text-color);
    font-family: var(--body-font);
    font-size: var(--font-size-base);
    line-height: var(--line-height);
    transition: background-color var(--transition-speed), color var(--transition-speed);
    padding: 1rem;
  }

  .page-title {
    font-family: var(--header-font);
    font-size: 2rem;
    font-weight: 700;
    text-align: center;
    margin: 1.5rem 0;
    color: var(--accent-color);
  }

  .conversation {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
    width: 100%;
    max-width: 800px;
    margin: 2rem auto;
    padding: 0 1rem;
  }

  .readability-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 0.7rem;
    margin: 1.5rem auto;
    justify-content: center;
    max-width: 800px;
  }

  .readability-controls button {
    font-size: 1rem;
    padding: 0.5rem 1.2rem;
    border-radius: 2rem;
    border: 1px solid #999;
    background: var(--bg-color);
    color: var(--accent-color);
    cursor: pointer;
    transition: all var(--transition-speed);
    box-shadow: var(--card-shadow);
    font-weight: 600;
  }

  .readability-controls button.active {
    background: var(--accent-color);
    color: white;
    border-color: var(--accent-color);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .font-size-controls {
    display: flex;
    gap: 0.3rem;
    margin-left: 0.5rem;
  }

  .font-size-controls button {
    padding: 0.5rem 0.8rem;
  }

  .message {
    display: flex;
    flex-direction: column;
    width: 85%;
    max-width: 600px;
    margin-bottom: 1.5rem;
    border-radius: var(--border-radius);
    background: var(--bubble-bg);
    box-shadow: var(--card-shadow);
    transition: all var(--transition-speed);
    border: 2px solid transparent;
  }

  .message.left {
    align-self: flex-start;
    # border-left: 4px solid var(--left-border);
    # border-bottom: 1px solid var(--left-border);
    # border-radius: 20px;
    # var(--border-radius) var(--border-radius) var(--border-radius) 0.2rem;
  }

  .message.right {
    align-self: flex-end;
    # border-right: 4px solid var(--right-border);
    # border-bottom: 1px solid var(--right-border);
    # border-radius: 20px;
    # var(--border-radius) var(--border-radius) 0.2rem var(--border-radius);
  }

  .message.explanation {
    background: linear-gradient(to right, rgba(245, 200, 66, 0.05), transparent);
    border-left: 4px solid var(--explanation-color);
    position: relative;
    overflow: hidden;
    box-shadow: 0 2px 12px rgba(245, 200, 66, 0.15);
  }

  .message.explanation::before {
    content: "üìù";
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    font-size: 1.2rem;
    opacity: 0.7;
  }

  .message.explanation .bubble p:first-child {
    font-weight: 600;
    color: var(--explanation-text);
  }

  /* Title message styling */
  .message-title {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--title-text);
    margin: 0.3rem 0 0.8rem 0;
    padding-bottom: 0.3rem;
    border-bottom: 1px solid var(--title-color);
  }

  .speaker {
    font-size: 1rem;
    font-weight: 700;
    padding: 0.8rem 1.5rem 0.2rem;
    color: var(--accent-color);
    letter-spacing: 0.01em;
  }

  .bubble {
    padding: 0.5rem 1.5rem 1.2rem;
    word-break: break-word;
    font-family: var(--body-font);
    transition: all var(--transition-speed);
    text-align: left;
  }

  .bubble p {
    margin: 0.7rem 0;
    transition: opacity var(--transition-speed), filter var(--transition-speed);
    color: var(--text-color);
    line-height: 1.5;
  }

  .paragraph-break {
    margin-top: 1.2rem;
  }

  .bubble.focus-fade p {
    opacity: 0.25;
    filter: blur(1px);
  }

  .bubble.focus-fade p.focus-global-current {
    opacity: 1;
    filter: none;
    background: var(--focus-highlight);
    padding: 0.5rem;
    border-radius: 0.4rem;
    box-shadow: var(--card-shadow);
    # border-left: 3px solid var(--accent-color);
    margin: 0.9rem 0.3rem;
  }

  .nav-buttons {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin: 2.5rem auto;
    max-width: 800px;
  }

  .nav-btn {
    background: var(--accent-color);
    color: white;
    border: none;
    border-radius: 2rem;
    padding: 0.8rem 2.2rem;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
    transition: all 0.2s;
    outline: none;
    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.3);
  }

  .nav-btn:hover, .nav-btn:focus {
    transform: translateY(-2px);
    box-shadow: 0 5px 16px rgba(0, 0, 0, 0.25);
    filter: brightness(1.1);
  }

  .prev-btn {
    background: var(--secondary-accent);
  }

  @media (max-width: 768px) {
    :root {
      --font-size-base: 16px;
    }

    .message {
      width: 95%;
    }

    .readability-controls {
      flex-direction: column;
      align-items: center;
    }

    .nav-buttons {
      gap: 1rem;
    }

    .nav-btn {
      padding: 0.7rem 1.5rem;
      font-size: 1rem;
    }
  }
</style>

<script>
  window.addEventListener("phx:page-loading-stop", () => {
    if (window.ReadabilityBubbleHookInitialized) return;
    window.ReadabilityBubbleHookInitialized = true;

    // DOM elements
    const bionicToggle = document.getElementById("toggle-bionic");
    const focusToggle = document.getElementById("toggle-focus");
    const darkModeToggle = document.getElementById("toggle-dark");
    const increaseFontBtn = document.getElementById("increase-font");
    const decreaseFontBtn = document.getElementById("decrease-font");
    const resetFontBtn = document.getElementById("reset-font");

    // State
    let bionicActive = localStorage.getItem("bionicActive") === "true";
    let focusActive = localStorage.getItem("focusActive") === "true";
    let darkMode = localStorage.getItem("darkMode") === "true";
    let fontSize = parseInt(localStorage.getItem("fontSize") || "18");

    // Initialize states from localStorage
    if (bionicActive) {
      bionicToggle.classList.add("active");
      toggleBionic(true);
    }

    if (focusActive) {
      focusToggle.classList.add("active");
      toggleFocus(true);
    }

    if (darkMode) {
      darkModeToggle.classList.add("active");
      document.body.classList.add("dark-mode");
    }

    updateFontSize(fontSize);

    // Low Fixation Bionic Reading function
    function bionicizeText(text) {
      return text.replace(/\b(\w+)\b/g, (match) => {
        const len = match.length;
        if (len <= 3) {
          // Short words: bold only the first letter
          return `<b style='font-weight:800'>${match.substring(0, 1)}</b>${match.substring(1)}`;
        } else if (len <= 6) {
          // Medium words: bold ~half of the word
          const boldPart = Math.ceil(len * 0.5);
          return `<b style='font-weight:800'>${match.substring(0, boldPart)}</b>${match.substring(boldPart)}`;
        } else {
          // Long words: bold ~third of the word
          const boldPart = Math.ceil(len * 0.33);
          return `<b style='font-weight:800'>${match.substring(0, boldPart)}</b>${match.substring(boldPart)}`;
        }
      });
    }

    // Apply/remove bionic reading to all paragraphs
    function toggleBionic(active) {
      document.querySelectorAll('.bubble .bionic').forEach(p => {
        if (active) {
          if (!p.dataset.bionicized) {
            p.innerHTML = bionicizeText(p.textContent);
            p.dataset.bionicized = "true";
          }
        } else {
          p.innerHTML = p.textContent;
          p.dataset.bionicized = "";
        }
      });
      localStorage.setItem("bionicActive", active);
    }

    // Focus Mode function
    function toggleFocus(active) {
      document.querySelectorAll('.bubble').forEach(bubble => {
        const paragraphs = bubble.querySelectorAll("p");
        bubble.classList.toggle("focus-fade", active);

        if (active && paragraphs.length > 0) {
          // If no paragraph is focused, focus the first
          if (![...paragraphs].some(p => p.classList.contains("focus-global-current"))) {
            paragraphs[0].classList.add("focus-global-current");
          }
          setTimeout(highlightCenterParagraph, 100);
        } else {
          paragraphs.forEach(p => p.classList.remove("focus-global-current"));
        }
      });
      localStorage.setItem("focusActive", active);
    }

    // Dark mode toggle
    function toggleDarkMode(active) {
      document.body.classList.toggle("dark-mode", active);
      localStorage.setItem("darkMode", active);
    }

    // Font size adjustment
    function updateFontSize(size) {
      document.documentElement.style.setProperty('--font-size-base', `${size}px`);
      localStorage.setItem("fontSize", size);
    }

    // Highlight paragraph closest to center when scrolling
    function highlightCenterParagraph() {
      if (!focusActive) return;

      const allParagraphs = Array.from(document.querySelectorAll('.bubble p'));
      if (!allParagraphs.length) return;

      const winHeight = window.innerHeight;
      const winCenter = winHeight / 2;
      let toHighlight = allParagraphs[0];
      let minDist = Infinity;

      // Handle special scroll cases
      if (window.scrollY === 0) {
        toHighlight = allParagraphs[0];
      } else {
        // Find paragraph closest to screen center
        allParagraphs.forEach(p => {
          const rect = p.getBoundingClientRect();
          const paraCenter = (rect.top + rect.bottom) / 2;

          // Adjust distance calculation to prioritize paragraphs that are fully visible
          let dist = Math.abs(paraCenter - winCenter);

          // If paragraph is in viewport, consider it a candidate
          if (rect.top < winHeight && rect.bottom > 0) {
            // If we're near bottom of page and this is the last paragraph, prioritize it
            if (window.scrollY + winHeight >= document.body.scrollHeight - 50 &&
                p === allParagraphs[allParagraphs.length - 1]) {
              dist = 0; // Force selection of last paragraph
            }

            if (dist < minDist) {
              minDist = dist;
              toHighlight = p;
            }
          }
        });
      }

      // Apply highlighting
      allParagraphs.forEach(p => {
        p.classList.toggle("focus-global-current", p === toHighlight);
      });
    }

    // Event listeners
    bionicToggle.addEventListener("click", () => {
      bionicActive = !bionicActive;
      bionicToggle.classList.toggle("active", bionicActive);
      toggleBionic(bionicActive);
    });

    focusToggle.addEventListener("click", () => {
      focusActive = !focusActive;
      focusToggle.classList.toggle("active", focusActive);
      toggleFocus(focusActive);
    });

    darkModeToggle.addEventListener("click", () => {
      darkMode = !darkMode;
      darkModeToggle.classList.toggle("active", darkMode);
      toggleDarkMode(darkMode);
    });

    increaseFontBtn.addEventListener("click", () => {
        fontSize += 2;
        updateFontSize(fontSize);

    });

    decreaseFontBtn.addEventListener("click", () => {
      if (fontSize > 8) {
        fontSize -= 2;
        updateFontSize(fontSize);
      }
    });

    resetFontBtn.addEventListener("click", () => {
      fontSize = 18;
      updateFontSize(fontSize);
    });

    // Scroll events for focus mode
    window.addEventListener("scroll", highlightCenterParagraph, { passive: true });
    window.addEventListener("resize", highlightCenterParagraph);

    // Initial highlighting and ensure bottom paragraphs are selectable
    setTimeout(highlightCenterParagraph, 200);

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      // Arrow keys for navigation between messages
      if (e.key === "ArrowRight") {
        document.querySelector(".next-btn").click();
      } else if (e.key === "ArrowLeft") {
        document.querySelector(".prev-btn").click();
      }

      // Toggle features with keyboard shortcuts
      if (e.ctrlKey || e.metaKey) {
        if (e.key === "b") { // Ctrl+B for low fixation reading
          bionicToggle.click();
          e.preventDefault();
        } else if (e.key === "f") { // Ctrl+F for focus mode
          focusToggle.click();
          e.preventDefault();
        } else if (e.key === "d") { // Ctrl+D for dark mode
          darkModeToggle.click();
          e.preventDefault();
        }
      }
    });
  });
</script>
