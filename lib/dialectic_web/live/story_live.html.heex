<div class="story-container" id="story-readability-container" phx-hook="StoryReadability">
  <.link
    navigate={~p"/#{@graph_id}?node=#{@node_id}"}
    id="graph-link"
    class="inline-flex items-center text-xs font-semibold px-3 py-1.5 rounded-md bg-blue-50 border border-blue-200 text-blue-700 hover:bg-blue-100 hover:text-blue-800 transition-colors shadow-sm fixed top-4 left-4 z-10"
    title="Return to interactive graph view"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-4 w-4 mr-1.5"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      stroke-width="2"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z"
      />
    </svg>
    Back to Graph
  </.link>
  <div class="readability-controls">
    <button id="toggle-dark" type="button">Dark Mode</button>
    <button id="toggle-bionic" type="button">Low Fixation Reading</button>
    <button id="toggle-focus" type="button">Focus Mode</button>
    <div class="font-size-controls">
      <button id="decrease-font" type="button">A-</button>
      <button id="reset-font" type="button">A</button>
      <button id="increase-font" type="button">A+</button>
    </div>
  </div>
  <div class="conversation">
    <%= for {node, idx} <- Enum.with_index(@path) do %>
      <% is_explanation =
        node.content && String.starts_with?(String.trim(node.content), "Explain:")

      is_title = node.content && String.starts_with?(String.trim(node.content), "Title:")

      # Extract title and content for title messages
      {title_text, remaining_content} =
        if is_title && node.content do
          trimmed = String.trim(node.content)
          title_without_prefix = String.replace(trimmed, ~r/^Title:\s*/, "", global: false)

          # Split by first newline
          case String.split(title_without_prefix, ~r/\r?\n/, parts: 2) do
            [title_part, content_part] -> {title_part, content_part}
            # No newline found
            [only_title] -> {only_title, ""}
          end
        else
          {nil, nil}
        end

      # Process content to remove prefixes if present
      processed_content =
        cond do
          is_explanation && node.content ->
            String.replace(String.trim(node.content), ~r/^Explain:\s*/, "", global: false)

          is_title && node.content ->
            remaining_content

          true ->
            node.content
        end %>
      <div class={"message " <> (if rem(idx, 2) == 0, do: "left", else: "right") <> (if is_explanation, do: " explanation", else: "")}>
        <div class="speaker">
          {cond do
            is_explanation -> "Explanation"
            is_title -> node.user || "Speaker"
            true -> node.user || "Speaker"
          end}
        </div>
        <div class="bubble" id={"bubble-#{idx}"}>
          <%= if is_title do %>
            <h3 class="message-title">{title_text}</h3>
          <% end %>

          <%= if !is_title || (is_title && String.length(processed_content) > 0) do %>
            <% # Split content into initial paragraphs
            initial_paragraphs =
              Regex.split(~r/(?:\r?\n){2,}|(?<=\.|\!|\?)\s{2,}/, processed_content || "",
                trim: true
              )

            # Further chunk paragraphs that are too long
            chunked_paragraphs =
              Enum.flat_map(initial_paragraphs, fn paragraph ->
                # Count sentences in paragraph
                sentences = Regex.split(~r/(?<=\.|\!|\?)\s+/, paragraph, trim: true)
                sentence_count = length(sentences)

                if sentence_count > 3 do
                  # Chunk into smaller paragraphs (2-3 sentences each)
                  sentences
                  |> Enum.chunk_every(2)
                  |> Enum.map(fn chunk -> Enum.join(chunk, " ") end)
                else
                  [paragraph]
                end
              end) %>

            <%= for {paragraph, p_idx} <- Enum.with_index(chunked_paragraphs) do %>
              <p class={"bionic #{if p_idx > 0 && rem(p_idx, 3) == 0, do: "paragraph-break", else: ""}"}>
                {String.replace(paragraph || "", "**", "")}
              </p>
            <% end %>
          <% end %>
          <span class="node-actions">
            <.link
              navigate={~p"/#{@graph_id}?node=#{node.id}"}
              class="text-xs font-medium text-white hover:text-gray-200 bg-blue-600 hover:bg-blue-700 px-1.5 py-0.5 rounded mr-1 ml-2 inline-flex items-center"
              title="View this node in graph"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
              View
            </.link>
            <.link
              navigate={"/#{@graph_id}/focus/#{node.id}"}
              class="text-xs font-medium text-white hover:text-gray-200 bg-emerald-600 hover:bg-emerald-700 px-1.5 py-0.5 rounded inline-flex items-center"
              title="Continue conversation from this point"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
              </svg>
              Branch
            </.link>
          </span>
        </div>
      </div>
    <% end %>
  </div>
  <div class="scroll-spacer" style="height: 70vh;"></div>
</div>

<style>
  :root {
    --text-color: #222;
    --bg-color: #fff;
    --bubble-bg: #ffffff;
    --left-border: #0747a6;
    --right-border: #5f0b87;
    --accent-color: #0747a6;
    --secondary-accent: #5f0b87;
    --explanation-color: #f5c842;
    --explanation-text: #845a00;
    --title-color: #3a5cff;
    --title-text: #333;
    --title-bg: transparent;
    --focus-highlight: #fff6d6;
    --border-radius: 1rem;
    --card-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    --header-font: 'Georgia', serif;
    --font-size-base: 18px;
    --line-height: 1.6;
    --transition-speed: 0.3s;
  }

  .dark-mode {
    --text-color: #ffffff;
    --bg-color: #121212;
    --bubble-bg: #1e1e1e;
    --left-border: #82b1ff;
    --right-border: #cf9fff;
    --accent-color: #82b1ff;
    --secondary-accent: #cf9fff;
    --explanation-color: #d4af37;
    --explanation-text: #f0d078;
    --title-color: #5c9eff;
    --title-text: #e0e0e0;
    --title-bg: transparent;
    --focus-highlight: #584e1b;
    --card-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
  }

  body {
    background-color: var(--bg-color);
    color: var(--text-color);
    font-family: var(--body-font);
    font-size: var(--font-size-base);
    line-height: var(--line-height);
    transition: background-color var(--transition-speed), color var(--transition-speed);
    padding: 1rem;
  }

  .page-title {
    font-family: var(--header-font);
    font-size: 2rem;
    font-weight: 700;
    text-align: center;
    margin: 1.5rem 0;
    color: var(--accent-color);
  }

  .conversation {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
    width: 100%;
    max-width: 800px;
    margin: 2rem auto;
    padding: 0 1rem;
  }

  .readability-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 0.7rem;
    margin: 1.5rem auto;
    justify-content: center;
    max-width: 800px;
  }

  .readability-controls button {
    font-size: 1rem;
    padding: 0.5rem 1.2rem;
    border-radius: 2rem;
    border: 1px solid #999;
    background: var(--bg-color);
    color: var(--accent-color);
    cursor: pointer;
    transition: all var(--transition-speed);
    box-shadow: var(--card-shadow);
    font-weight: 600;
  }

  .readability-controls button.active {
    background: var(--accent-color);
    color: white;
    border-color: var(--accent-color);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .font-size-controls {
    display: flex;
    gap: 0.3rem;
    margin-left: 0.5rem;
  }

  .font-size-controls button {
    padding: 0.5rem 0.8rem;
  }

  .message {
    display: flex;
    flex-direction: column;
    width: 85%;
    max-width: 600px;
    margin-bottom: 1.5rem;
    border-radius: var(--border-radius);
    background: var(--bubble-bg);
    box-shadow: var(--card-shadow);
    transition: all var(--transition-speed);
    border: 2px solid transparent;
  }

  .message.left {
    align-self: flex-start;
  }

  .message.right {
    align-self: flex-end;
  }

  .message.explanation {
    background: linear-gradient(to right, rgba(245, 200, 66, 0.05), transparent);
    border-left: 4px solid var(--explanation-color);
    position: relative;
    overflow: hidden;
    box-shadow: 0 2px 12px rgba(245, 200, 66, 0.15);
  }

  .message.explanation::before {
    content: "üìù";
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    font-size: 1.2rem;
    opacity: 0.7;
  }

  .message.explanation .bubble p:first-child {
    font-weight: 600;
    color: var(--explanation-text);
  }

  .message-title {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--title-text);
    margin: 0.3rem 0 0.8rem 0;
    padding-bottom: 0.3rem;
    border-bottom: 1px solid var(--title-color);
  }

  .speaker {
    font-size: 1rem;
    font-weight: 700;
    padding: 0.8rem 1.5rem 0.2rem;
    color: var(--accent-color);
    letter-spacing: 0.01em;
  }

  .bubble {
    padding: 0.5rem 1.5rem 1.2rem;
    word-break: break-word;
    font-family: var(--body-font);
    transition: all var(--transition-speed);
    text-align: left;
  }

  .bubble p {
    margin: 0.7rem 0;
    transition: opacity var(--transition-speed), filter var(--transition-speed);
    color: var(--text-color);
    line-height: 1.5;
  }

  .paragraph-break {
    margin-top: 1.2rem;
  }

  .bubble.focus-fade p {
    opacity: 0.25;
    filter: blur(1px);
  }

  .bubble.focus-fade p.focus-current {
    opacity: 1;
    filter: none;
    background: var(--focus-highlight);
    padding: 0.5rem;
    border-radius: 0.4rem;
    box-shadow: var(--card-shadow);
    margin: 0.9rem 0.3rem;
  }

  @media (max-width: 768px) {
    :root {
      --font-size-base: 16px;
    }

    .message {
      width: 95%;
    }

    .readability-controls {
      flex-direction: column;
      align-items: center;
    }
  }
</style>
